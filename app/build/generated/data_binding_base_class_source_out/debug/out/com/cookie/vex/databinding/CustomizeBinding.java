// Generated by view binder compiler. Do not edit!
package com.cookie.vex.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatCheckBox;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.cookie.vex.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.slider.Slider;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CustomizeBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout background;

  @NonNull
  public final ImageView bgPreview;

  @NonNull
  public final Slider bordas;

  @NonNull
  public final LinearLayout borderPreview;

  @NonNull
  public final CardView cardImgPreview;

  @NonNull
  public final CardView cardRadiusColor;

  @NonNull
  public final CardView cardRadiusTextColor;

  @NonNull
  public final CardView cardRippleColor;

  @NonNull
  public final CardView cardStrokeColor;

  @NonNull
  public final AppCompatCheckBox checkMsg;

  @NonNull
  public final LinearLayout colorText;

  @NonNull
  public final LinearLayout content;

  @NonNull
  public final LinearLayout contentPreview;

  @NonNull
  public final MaterialButton deleteBg;

  @NonNull
  public final MaterialButton deleteStyle;

  @NonNull
  public final TextView infoText;

  @NonNull
  public final LinearLayout layoutColor;

  @NonNull
  public final LinearLayout linearRadius;

  @NonNull
  public final LinearLayout linearRadius1;

  @NonNull
  public final LinearLayout linearRadius2;

  @NonNull
  public final LinearLayout linearRadius3;

  @NonNull
  public final LinearLayout linearRadius4;

  @NonNull
  public final LinearLayout linearRadiusContent;

  @NonNull
  public final LinearLayout linearRadiusTextContent;

  @NonNull
  public final LinearLayout linearRippleContent;

  @NonNull
  public final LinearLayout linearStrokeContent;

  @NonNull
  public final TextView nTop1;

  @NonNull
  public final TextView nTop2;

  @NonNull
  public final TextView nTop3;

  @NonNull
  public final TextView nTop4;

  @NonNull
  public final MaterialButton pickBg;

  @NonNull
  public final LinearLayout preview;

  @NonNull
  public final LinearLayout rippleColorPreview;

  @NonNull
  public final TextView rippleText;

  @NonNull
  public final MaterialButton saveBg;

  @NonNull
  public final MaterialButton saveStyle;

  @NonNull
  public final ScrollView scrollFunctions;

  @NonNull
  public final Slider seekTop1;

  @NonNull
  public final Slider seekTop2;

  @NonNull
  public final Slider seekTop3;

  @NonNull
  public final Slider seekTop4;

  @NonNull
  public final LinearLayout strokeContent;

  @NonNull
  public final TextView textBottom1;

  @NonNull
  public final TextView textBottom2;

  @NonNull
  public final TextView textPreview;

  @NonNull
  public final TextView textRadius;

  @NonNull
  public final TextView textRadiusColor;

  @NonNull
  public final TextView textRadiusColorText;

  @NonNull
  public final TextView textRippleColor;

  @NonNull
  public final TextView textStroke;

  @NonNull
  public final TextView textStrokeColor;

  @NonNull
  public final TextView textTop1;

  @NonNull
  public final TextView textTop2;

  private CustomizeBinding(@NonNull LinearLayout rootView, @NonNull LinearLayout background,
      @NonNull ImageView bgPreview, @NonNull Slider bordas, @NonNull LinearLayout borderPreview,
      @NonNull CardView cardImgPreview, @NonNull CardView cardRadiusColor,
      @NonNull CardView cardRadiusTextColor, @NonNull CardView cardRippleColor,
      @NonNull CardView cardStrokeColor, @NonNull AppCompatCheckBox checkMsg,
      @NonNull LinearLayout colorText, @NonNull LinearLayout content,
      @NonNull LinearLayout contentPreview, @NonNull MaterialButton deleteBg,
      @NonNull MaterialButton deleteStyle, @NonNull TextView infoText,
      @NonNull LinearLayout layoutColor, @NonNull LinearLayout linearRadius,
      @NonNull LinearLayout linearRadius1, @NonNull LinearLayout linearRadius2,
      @NonNull LinearLayout linearRadius3, @NonNull LinearLayout linearRadius4,
      @NonNull LinearLayout linearRadiusContent, @NonNull LinearLayout linearRadiusTextContent,
      @NonNull LinearLayout linearRippleContent, @NonNull LinearLayout linearStrokeContent,
      @NonNull TextView nTop1, @NonNull TextView nTop2, @NonNull TextView nTop3,
      @NonNull TextView nTop4, @NonNull MaterialButton pickBg, @NonNull LinearLayout preview,
      @NonNull LinearLayout rippleColorPreview, @NonNull TextView rippleText,
      @NonNull MaterialButton saveBg, @NonNull MaterialButton saveStyle,
      @NonNull ScrollView scrollFunctions, @NonNull Slider seekTop1, @NonNull Slider seekTop2,
      @NonNull Slider seekTop3, @NonNull Slider seekTop4, @NonNull LinearLayout strokeContent,
      @NonNull TextView textBottom1, @NonNull TextView textBottom2, @NonNull TextView textPreview,
      @NonNull TextView textRadius, @NonNull TextView textRadiusColor,
      @NonNull TextView textRadiusColorText, @NonNull TextView textRippleColor,
      @NonNull TextView textStroke, @NonNull TextView textStrokeColor, @NonNull TextView textTop1,
      @NonNull TextView textTop2) {
    this.rootView = rootView;
    this.background = background;
    this.bgPreview = bgPreview;
    this.bordas = bordas;
    this.borderPreview = borderPreview;
    this.cardImgPreview = cardImgPreview;
    this.cardRadiusColor = cardRadiusColor;
    this.cardRadiusTextColor = cardRadiusTextColor;
    this.cardRippleColor = cardRippleColor;
    this.cardStrokeColor = cardStrokeColor;
    this.checkMsg = checkMsg;
    this.colorText = colorText;
    this.content = content;
    this.contentPreview = contentPreview;
    this.deleteBg = deleteBg;
    this.deleteStyle = deleteStyle;
    this.infoText = infoText;
    this.layoutColor = layoutColor;
    this.linearRadius = linearRadius;
    this.linearRadius1 = linearRadius1;
    this.linearRadius2 = linearRadius2;
    this.linearRadius3 = linearRadius3;
    this.linearRadius4 = linearRadius4;
    this.linearRadiusContent = linearRadiusContent;
    this.linearRadiusTextContent = linearRadiusTextContent;
    this.linearRippleContent = linearRippleContent;
    this.linearStrokeContent = linearStrokeContent;
    this.nTop1 = nTop1;
    this.nTop2 = nTop2;
    this.nTop3 = nTop3;
    this.nTop4 = nTop4;
    this.pickBg = pickBg;
    this.preview = preview;
    this.rippleColorPreview = rippleColorPreview;
    this.rippleText = rippleText;
    this.saveBg = saveBg;
    this.saveStyle = saveStyle;
    this.scrollFunctions = scrollFunctions;
    this.seekTop1 = seekTop1;
    this.seekTop2 = seekTop2;
    this.seekTop3 = seekTop3;
    this.seekTop4 = seekTop4;
    this.strokeContent = strokeContent;
    this.textBottom1 = textBottom1;
    this.textBottom2 = textBottom2;
    this.textPreview = textPreview;
    this.textRadius = textRadius;
    this.textRadiusColor = textRadiusColor;
    this.textRadiusColorText = textRadiusColorText;
    this.textRippleColor = textRippleColor;
    this.textStroke = textStroke;
    this.textStrokeColor = textStrokeColor;
    this.textTop1 = textTop1;
    this.textTop2 = textTop2;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CustomizeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CustomizeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.customize, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CustomizeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.background;
      LinearLayout background = ViewBindings.findChildViewById(rootView, id);
      if (background == null) {
        break missingId;
      }

      id = R.id.bg_preview;
      ImageView bgPreview = ViewBindings.findChildViewById(rootView, id);
      if (bgPreview == null) {
        break missingId;
      }

      id = R.id.bordas;
      Slider bordas = ViewBindings.findChildViewById(rootView, id);
      if (bordas == null) {
        break missingId;
      }

      id = R.id.border_preview;
      LinearLayout borderPreview = ViewBindings.findChildViewById(rootView, id);
      if (borderPreview == null) {
        break missingId;
      }

      id = R.id.card_img_preview;
      CardView cardImgPreview = ViewBindings.findChildViewById(rootView, id);
      if (cardImgPreview == null) {
        break missingId;
      }

      id = R.id.card_radius_color;
      CardView cardRadiusColor = ViewBindings.findChildViewById(rootView, id);
      if (cardRadiusColor == null) {
        break missingId;
      }

      id = R.id.card_radius_text_color;
      CardView cardRadiusTextColor = ViewBindings.findChildViewById(rootView, id);
      if (cardRadiusTextColor == null) {
        break missingId;
      }

      id = R.id.card_ripple_color;
      CardView cardRippleColor = ViewBindings.findChildViewById(rootView, id);
      if (cardRippleColor == null) {
        break missingId;
      }

      id = R.id.card_stroke_color;
      CardView cardStrokeColor = ViewBindings.findChildViewById(rootView, id);
      if (cardStrokeColor == null) {
        break missingId;
      }

      id = R.id.check_msg;
      AppCompatCheckBox checkMsg = ViewBindings.findChildViewById(rootView, id);
      if (checkMsg == null) {
        break missingId;
      }

      id = R.id.color_text;
      LinearLayout colorText = ViewBindings.findChildViewById(rootView, id);
      if (colorText == null) {
        break missingId;
      }

      id = R.id.content;
      LinearLayout content = ViewBindings.findChildViewById(rootView, id);
      if (content == null) {
        break missingId;
      }

      id = R.id.content_preview;
      LinearLayout contentPreview = ViewBindings.findChildViewById(rootView, id);
      if (contentPreview == null) {
        break missingId;
      }

      id = R.id.delete_bg;
      MaterialButton deleteBg = ViewBindings.findChildViewById(rootView, id);
      if (deleteBg == null) {
        break missingId;
      }

      id = R.id.delete_style;
      MaterialButton deleteStyle = ViewBindings.findChildViewById(rootView, id);
      if (deleteStyle == null) {
        break missingId;
      }

      id = R.id.info_text;
      TextView infoText = ViewBindings.findChildViewById(rootView, id);
      if (infoText == null) {
        break missingId;
      }

      id = R.id.layout_color;
      LinearLayout layoutColor = ViewBindings.findChildViewById(rootView, id);
      if (layoutColor == null) {
        break missingId;
      }

      id = R.id.linear_radius;
      LinearLayout linearRadius = ViewBindings.findChildViewById(rootView, id);
      if (linearRadius == null) {
        break missingId;
      }

      id = R.id.linear_radius_1;
      LinearLayout linearRadius1 = ViewBindings.findChildViewById(rootView, id);
      if (linearRadius1 == null) {
        break missingId;
      }

      id = R.id.linear_radius_2;
      LinearLayout linearRadius2 = ViewBindings.findChildViewById(rootView, id);
      if (linearRadius2 == null) {
        break missingId;
      }

      id = R.id.linear_radius_3;
      LinearLayout linearRadius3 = ViewBindings.findChildViewById(rootView, id);
      if (linearRadius3 == null) {
        break missingId;
      }

      id = R.id.linear_radius_4;
      LinearLayout linearRadius4 = ViewBindings.findChildViewById(rootView, id);
      if (linearRadius4 == null) {
        break missingId;
      }

      id = R.id.linear_radius_content;
      LinearLayout linearRadiusContent = ViewBindings.findChildViewById(rootView, id);
      if (linearRadiusContent == null) {
        break missingId;
      }

      id = R.id.linear_radius_text_content;
      LinearLayout linearRadiusTextContent = ViewBindings.findChildViewById(rootView, id);
      if (linearRadiusTextContent == null) {
        break missingId;
      }

      id = R.id.linear_ripple_content;
      LinearLayout linearRippleContent = ViewBindings.findChildViewById(rootView, id);
      if (linearRippleContent == null) {
        break missingId;
      }

      id = R.id.linear_stroke_content;
      LinearLayout linearStrokeContent = ViewBindings.findChildViewById(rootView, id);
      if (linearStrokeContent == null) {
        break missingId;
      }

      id = R.id.n_top1;
      TextView nTop1 = ViewBindings.findChildViewById(rootView, id);
      if (nTop1 == null) {
        break missingId;
      }

      id = R.id.n_top2;
      TextView nTop2 = ViewBindings.findChildViewById(rootView, id);
      if (nTop2 == null) {
        break missingId;
      }

      id = R.id.n_top3;
      TextView nTop3 = ViewBindings.findChildViewById(rootView, id);
      if (nTop3 == null) {
        break missingId;
      }

      id = R.id.n_top4;
      TextView nTop4 = ViewBindings.findChildViewById(rootView, id);
      if (nTop4 == null) {
        break missingId;
      }

      id = R.id.pick_bg;
      MaterialButton pickBg = ViewBindings.findChildViewById(rootView, id);
      if (pickBg == null) {
        break missingId;
      }

      id = R.id.preview;
      LinearLayout preview = ViewBindings.findChildViewById(rootView, id);
      if (preview == null) {
        break missingId;
      }

      id = R.id.ripple_color_preview;
      LinearLayout rippleColorPreview = ViewBindings.findChildViewById(rootView, id);
      if (rippleColorPreview == null) {
        break missingId;
      }

      id = R.id.ripple_text;
      TextView rippleText = ViewBindings.findChildViewById(rootView, id);
      if (rippleText == null) {
        break missingId;
      }

      id = R.id.save_bg;
      MaterialButton saveBg = ViewBindings.findChildViewById(rootView, id);
      if (saveBg == null) {
        break missingId;
      }

      id = R.id.save_style;
      MaterialButton saveStyle = ViewBindings.findChildViewById(rootView, id);
      if (saveStyle == null) {
        break missingId;
      }

      id = R.id.scroll_functions;
      ScrollView scrollFunctions = ViewBindings.findChildViewById(rootView, id);
      if (scrollFunctions == null) {
        break missingId;
      }

      id = R.id.seek_top1;
      Slider seekTop1 = ViewBindings.findChildViewById(rootView, id);
      if (seekTop1 == null) {
        break missingId;
      }

      id = R.id.seek_top2;
      Slider seekTop2 = ViewBindings.findChildViewById(rootView, id);
      if (seekTop2 == null) {
        break missingId;
      }

      id = R.id.seek_top3;
      Slider seekTop3 = ViewBindings.findChildViewById(rootView, id);
      if (seekTop3 == null) {
        break missingId;
      }

      id = R.id.seek_top4;
      Slider seekTop4 = ViewBindings.findChildViewById(rootView, id);
      if (seekTop4 == null) {
        break missingId;
      }

      id = R.id.stroke_content;
      LinearLayout strokeContent = ViewBindings.findChildViewById(rootView, id);
      if (strokeContent == null) {
        break missingId;
      }

      id = R.id.text_bottom1;
      TextView textBottom1 = ViewBindings.findChildViewById(rootView, id);
      if (textBottom1 == null) {
        break missingId;
      }

      id = R.id.text_bottom2;
      TextView textBottom2 = ViewBindings.findChildViewById(rootView, id);
      if (textBottom2 == null) {
        break missingId;
      }

      id = R.id.text_preview;
      TextView textPreview = ViewBindings.findChildViewById(rootView, id);
      if (textPreview == null) {
        break missingId;
      }

      id = R.id.text_radius;
      TextView textRadius = ViewBindings.findChildViewById(rootView, id);
      if (textRadius == null) {
        break missingId;
      }

      id = R.id.text_radius_color;
      TextView textRadiusColor = ViewBindings.findChildViewById(rootView, id);
      if (textRadiusColor == null) {
        break missingId;
      }

      id = R.id.text_radius_color_text;
      TextView textRadiusColorText = ViewBindings.findChildViewById(rootView, id);
      if (textRadiusColorText == null) {
        break missingId;
      }

      id = R.id.text_ripple_color;
      TextView textRippleColor = ViewBindings.findChildViewById(rootView, id);
      if (textRippleColor == null) {
        break missingId;
      }

      id = R.id.text_stroke;
      TextView textStroke = ViewBindings.findChildViewById(rootView, id);
      if (textStroke == null) {
        break missingId;
      }

      id = R.id.text_stroke_color;
      TextView textStrokeColor = ViewBindings.findChildViewById(rootView, id);
      if (textStrokeColor == null) {
        break missingId;
      }

      id = R.id.text_top1;
      TextView textTop1 = ViewBindings.findChildViewById(rootView, id);
      if (textTop1 == null) {
        break missingId;
      }

      id = R.id.text_top2;
      TextView textTop2 = ViewBindings.findChildViewById(rootView, id);
      if (textTop2 == null) {
        break missingId;
      }

      return new CustomizeBinding((LinearLayout) rootView, background, bgPreview, bordas,
          borderPreview, cardImgPreview, cardRadiusColor, cardRadiusTextColor, cardRippleColor,
          cardStrokeColor, checkMsg, colorText, content, contentPreview, deleteBg, deleteStyle,
          infoText, layoutColor, linearRadius, linearRadius1, linearRadius2, linearRadius3,
          linearRadius4, linearRadiusContent, linearRadiusTextContent, linearRippleContent,
          linearStrokeContent, nTop1, nTop2, nTop3, nTop4, pickBg, preview, rippleColorPreview,
          rippleText, saveBg, saveStyle, scrollFunctions, seekTop1, seekTop2, seekTop3, seekTop4,
          strokeContent, textBottom1, textBottom2, textPreview, textRadius, textRadiusColor,
          textRadiusColorText, textRippleColor, textStroke, textStrokeColor, textTop1, textTop2);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

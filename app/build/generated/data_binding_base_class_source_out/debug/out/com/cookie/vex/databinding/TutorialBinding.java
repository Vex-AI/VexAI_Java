// Generated by view binder compiler. Do not edit!
package com.cookie.vex.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ViewFlipper;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.cookie.vex.R;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class TutorialBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout background;

  @NonNull
  public final MaterialButton goBack;

  @NonNull
  public final MaterialButton next;

  @NonNull
  public final MaterialButton previous;

  @NonNull
  public final LinearLayout relativeBase;

  @NonNull
  public final ImageView vexTutorial1;

  @NonNull
  public final ImageView vexTutorial2;

  @NonNull
  public final ImageView vexTutorial5;

  @NonNull
  public final ImageView vexTutorial6;

  @NonNull
  public final ViewFlipper viewflipper;

  private TutorialBinding(@NonNull LinearLayout rootView, @NonNull LinearLayout background,
      @NonNull MaterialButton goBack, @NonNull MaterialButton next,
      @NonNull MaterialButton previous, @NonNull LinearLayout relativeBase,
      @NonNull ImageView vexTutorial1, @NonNull ImageView vexTutorial2,
      @NonNull ImageView vexTutorial5, @NonNull ImageView vexTutorial6,
      @NonNull ViewFlipper viewflipper) {
    this.rootView = rootView;
    this.background = background;
    this.goBack = goBack;
    this.next = next;
    this.previous = previous;
    this.relativeBase = relativeBase;
    this.vexTutorial1 = vexTutorial1;
    this.vexTutorial2 = vexTutorial2;
    this.vexTutorial5 = vexTutorial5;
    this.vexTutorial6 = vexTutorial6;
    this.viewflipper = viewflipper;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static TutorialBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static TutorialBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.tutorial, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static TutorialBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.background;
      LinearLayout background = ViewBindings.findChildViewById(rootView, id);
      if (background == null) {
        break missingId;
      }

      id = R.id.go_back;
      MaterialButton goBack = ViewBindings.findChildViewById(rootView, id);
      if (goBack == null) {
        break missingId;
      }

      id = R.id.next;
      MaterialButton next = ViewBindings.findChildViewById(rootView, id);
      if (next == null) {
        break missingId;
      }

      id = R.id.previous;
      MaterialButton previous = ViewBindings.findChildViewById(rootView, id);
      if (previous == null) {
        break missingId;
      }

      id = R.id.relative_base;
      LinearLayout relativeBase = ViewBindings.findChildViewById(rootView, id);
      if (relativeBase == null) {
        break missingId;
      }

      id = R.id.vex_tutorial_1;
      ImageView vexTutorial1 = ViewBindings.findChildViewById(rootView, id);
      if (vexTutorial1 == null) {
        break missingId;
      }

      id = R.id.vex_tutorial_2;
      ImageView vexTutorial2 = ViewBindings.findChildViewById(rootView, id);
      if (vexTutorial2 == null) {
        break missingId;
      }

      id = R.id.vex_tutorial_5;
      ImageView vexTutorial5 = ViewBindings.findChildViewById(rootView, id);
      if (vexTutorial5 == null) {
        break missingId;
      }

      id = R.id.vex_tutorial_6;
      ImageView vexTutorial6 = ViewBindings.findChildViewById(rootView, id);
      if (vexTutorial6 == null) {
        break missingId;
      }

      id = R.id.viewflipper;
      ViewFlipper viewflipper = ViewBindings.findChildViewById(rootView, id);
      if (viewflipper == null) {
        break missingId;
      }

      return new TutorialBinding((LinearLayout) rootView, background, goBack, next, previous,
          relativeBase, vexTutorial1, vexTutorial2, vexTutorial5, vexTutorial6, viewflipper);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

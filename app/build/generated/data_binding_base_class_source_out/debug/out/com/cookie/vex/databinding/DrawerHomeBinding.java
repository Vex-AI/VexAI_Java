// Generated by view binder compiler. Do not edit!
package com.cookie.vex.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Switch;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.cookie.vex.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DrawerHomeBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout about;

  @NonNull
  public final ImageView aboutIcon;

  @NonNull
  public final LinearLayout base;

  @NonNull
  public final LinearLayout clear;

  @NonNull
  public final ImageView clearIcon;

  @NonNull
  public final LinearLayout contribution;

  @NonNull
  public final ImageView contributionIcon;

  @NonNull
  public final LinearLayout customizar;

  @NonNull
  public final ImageView customizeIcon;

  @NonNull
  public final LinearLayout database;

  @NonNull
  public final ImageView databaseIcon;

  @NonNull
  public final Switch donation;

  @NonNull
  public final ImageView functionsIcon;

  @NonNull
  public final LinearLayout settings;

  @NonNull
  public final TextView textAbout;

  @NonNull
  public final TextView textAds;

  @NonNull
  public final TextView textChatCustomize;

  @NonNull
  public final TextView textClearChat;

  @NonNull
  public final TextView textLearnFunctions;

  @NonNull
  public final TextView textTutorial;

  @NonNull
  public final TextView textVexLearn;

  @NonNull
  public final LinearLayout tutorial;

  @NonNull
  public final ImageView tutorialIcon;

  private DrawerHomeBinding(@NonNull LinearLayout rootView, @NonNull LinearLayout about,
      @NonNull ImageView aboutIcon, @NonNull LinearLayout base, @NonNull LinearLayout clear,
      @NonNull ImageView clearIcon, @NonNull LinearLayout contribution,
      @NonNull ImageView contributionIcon, @NonNull LinearLayout customizar,
      @NonNull ImageView customizeIcon, @NonNull LinearLayout database,
      @NonNull ImageView databaseIcon, @NonNull Switch donation, @NonNull ImageView functionsIcon,
      @NonNull LinearLayout settings, @NonNull TextView textAbout, @NonNull TextView textAds,
      @NonNull TextView textChatCustomize, @NonNull TextView textClearChat,
      @NonNull TextView textLearnFunctions, @NonNull TextView textTutorial,
      @NonNull TextView textVexLearn, @NonNull LinearLayout tutorial,
      @NonNull ImageView tutorialIcon) {
    this.rootView = rootView;
    this.about = about;
    this.aboutIcon = aboutIcon;
    this.base = base;
    this.clear = clear;
    this.clearIcon = clearIcon;
    this.contribution = contribution;
    this.contributionIcon = contributionIcon;
    this.customizar = customizar;
    this.customizeIcon = customizeIcon;
    this.database = database;
    this.databaseIcon = databaseIcon;
    this.donation = donation;
    this.functionsIcon = functionsIcon;
    this.settings = settings;
    this.textAbout = textAbout;
    this.textAds = textAds;
    this.textChatCustomize = textChatCustomize;
    this.textClearChat = textClearChat;
    this.textLearnFunctions = textLearnFunctions;
    this.textTutorial = textTutorial;
    this.textVexLearn = textVexLearn;
    this.tutorial = tutorial;
    this.tutorialIcon = tutorialIcon;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DrawerHomeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DrawerHomeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout._drawer_home, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DrawerHomeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.about;
      LinearLayout about = ViewBindings.findChildViewById(rootView, id);
      if (about == null) {
        break missingId;
      }

      id = R.id.about_icon;
      ImageView aboutIcon = ViewBindings.findChildViewById(rootView, id);
      if (aboutIcon == null) {
        break missingId;
      }

      id = R.id.base;
      LinearLayout base = ViewBindings.findChildViewById(rootView, id);
      if (base == null) {
        break missingId;
      }

      id = R.id.clear;
      LinearLayout clear = ViewBindings.findChildViewById(rootView, id);
      if (clear == null) {
        break missingId;
      }

      id = R.id.clear_icon;
      ImageView clearIcon = ViewBindings.findChildViewById(rootView, id);
      if (clearIcon == null) {
        break missingId;
      }

      id = R.id.contribution;
      LinearLayout contribution = ViewBindings.findChildViewById(rootView, id);
      if (contribution == null) {
        break missingId;
      }

      id = R.id.contribution_icon;
      ImageView contributionIcon = ViewBindings.findChildViewById(rootView, id);
      if (contributionIcon == null) {
        break missingId;
      }

      id = R.id.customizar;
      LinearLayout customizar = ViewBindings.findChildViewById(rootView, id);
      if (customizar == null) {
        break missingId;
      }

      id = R.id.customize_icon;
      ImageView customizeIcon = ViewBindings.findChildViewById(rootView, id);
      if (customizeIcon == null) {
        break missingId;
      }

      id = R.id.database;
      LinearLayout database = ViewBindings.findChildViewById(rootView, id);
      if (database == null) {
        break missingId;
      }

      id = R.id.database_icon;
      ImageView databaseIcon = ViewBindings.findChildViewById(rootView, id);
      if (databaseIcon == null) {
        break missingId;
      }

      id = R.id.donation;
      Switch donation = ViewBindings.findChildViewById(rootView, id);
      if (donation == null) {
        break missingId;
      }

      id = R.id.functions_icon;
      ImageView functionsIcon = ViewBindings.findChildViewById(rootView, id);
      if (functionsIcon == null) {
        break missingId;
      }

      id = R.id.settings;
      LinearLayout settings = ViewBindings.findChildViewById(rootView, id);
      if (settings == null) {
        break missingId;
      }

      id = R.id.text_about;
      TextView textAbout = ViewBindings.findChildViewById(rootView, id);
      if (textAbout == null) {
        break missingId;
      }

      id = R.id.text_ads;
      TextView textAds = ViewBindings.findChildViewById(rootView, id);
      if (textAds == null) {
        break missingId;
      }

      id = R.id.text_chat_customize;
      TextView textChatCustomize = ViewBindings.findChildViewById(rootView, id);
      if (textChatCustomize == null) {
        break missingId;
      }

      id = R.id.text_clear_chat;
      TextView textClearChat = ViewBindings.findChildViewById(rootView, id);
      if (textClearChat == null) {
        break missingId;
      }

      id = R.id.text_learn_functions;
      TextView textLearnFunctions = ViewBindings.findChildViewById(rootView, id);
      if (textLearnFunctions == null) {
        break missingId;
      }

      id = R.id.text_tutorial;
      TextView textTutorial = ViewBindings.findChildViewById(rootView, id);
      if (textTutorial == null) {
        break missingId;
      }

      id = R.id.text_vex_learn;
      TextView textVexLearn = ViewBindings.findChildViewById(rootView, id);
      if (textVexLearn == null) {
        break missingId;
      }

      id = R.id.tutorial;
      LinearLayout tutorial = ViewBindings.findChildViewById(rootView, id);
      if (tutorial == null) {
        break missingId;
      }

      id = R.id.tutorial_icon;
      ImageView tutorialIcon = ViewBindings.findChildViewById(rootView, id);
      if (tutorialIcon == null) {
        break missingId;
      }

      return new DrawerHomeBinding((LinearLayout) rootView, about, aboutIcon, base, clear,
          clearIcon, contribution, contributionIcon, customizar, customizeIcon, database,
          databaseIcon, donation, functionsIcon, settings, textAbout, textAds, textChatCustomize,
          textClearChat, textLearnFunctions, textTutorial, textVexLearn, tutorial, tutorialIcon);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

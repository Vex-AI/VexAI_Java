// Generated by view binder compiler. Do not edit!
package com.cookie.vex.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.cardview.widget.CardView;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.airbnb.lottie.LottieAnimationView;
import com.cookie.vex.R;
import com.google.android.material.appbar.AppBarLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class HomeBinding implements ViewBinding {
  @NonNull
  private final DrawerLayout rootView;

  @NonNull
  public final AppBarLayout AppBar;

  @NonNull
  public final CoordinatorLayout Coordinator;

  @NonNull
  public final DrawerLayout Drawer;

  @NonNull
  public final LinearLayout NavView;

  @NonNull
  public final Toolbar Toolbar;

  @NonNull
  public final FrameLayout background;

  @NonNull
  public final CardView cardOnline;

  @NonNull
  public final CardView cardProfile;

  @NonNull
  public final CardView cardType;

  @NonNull
  public final RecyclerView chat;

  @NonNull
  public final LinearLayout contentProfile;

  @NonNull
  public final LinearLayout contentType;

  @NonNull
  public final ImageView drawableSave;

  @NonNull
  public final ImageView drawableSend;

  @NonNull
  public final EditText edittextMsg;

  @NonNull
  public final ImageView imageBackground;

  @NonNull
  public final LinearLayout linearText;

  @NonNull
  public final LottieAnimationView lottie1;

  @NonNull
  public final LinearLayout relative;

  @NonNull
  public final LinearLayout tipying;

  @NonNull
  public final LinearLayout typeBase;

  @NonNull
  public final TextView typeText;

  @NonNull
  public final TextView vexName;

  @NonNull
  public final ImageView vexProfile;

  private HomeBinding(@NonNull DrawerLayout rootView, @NonNull AppBarLayout AppBar,
      @NonNull CoordinatorLayout Coordinator, @NonNull DrawerLayout Drawer,
      @NonNull LinearLayout NavView, @NonNull Toolbar Toolbar, @NonNull FrameLayout background,
      @NonNull CardView cardOnline, @NonNull CardView cardProfile, @NonNull CardView cardType,
      @NonNull RecyclerView chat, @NonNull LinearLayout contentProfile,
      @NonNull LinearLayout contentType, @NonNull ImageView drawableSave,
      @NonNull ImageView drawableSend, @NonNull EditText edittextMsg,
      @NonNull ImageView imageBackground, @NonNull LinearLayout linearText,
      @NonNull LottieAnimationView lottie1, @NonNull LinearLayout relative,
      @NonNull LinearLayout tipying, @NonNull LinearLayout typeBase, @NonNull TextView typeText,
      @NonNull TextView vexName, @NonNull ImageView vexProfile) {
    this.rootView = rootView;
    this.AppBar = AppBar;
    this.Coordinator = Coordinator;
    this.Drawer = Drawer;
    this.NavView = NavView;
    this.Toolbar = Toolbar;
    this.background = background;
    this.cardOnline = cardOnline;
    this.cardProfile = cardProfile;
    this.cardType = cardType;
    this.chat = chat;
    this.contentProfile = contentProfile;
    this.contentType = contentType;
    this.drawableSave = drawableSave;
    this.drawableSend = drawableSend;
    this.edittextMsg = edittextMsg;
    this.imageBackground = imageBackground;
    this.linearText = linearText;
    this.lottie1 = lottie1;
    this.relative = relative;
    this.tipying = tipying;
    this.typeBase = typeBase;
    this.typeText = typeText;
    this.vexName = vexName;
    this.vexProfile = vexProfile;
  }

  @Override
  @NonNull
  public DrawerLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static HomeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static HomeBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.home, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static HomeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id._app_bar;
      AppBarLayout AppBar = ViewBindings.findChildViewById(rootView, id);
      if (AppBar == null) {
        break missingId;
      }

      id = R.id._coordinator;
      CoordinatorLayout Coordinator = ViewBindings.findChildViewById(rootView, id);
      if (Coordinator == null) {
        break missingId;
      }

      DrawerLayout Drawer = (DrawerLayout) rootView;

      id = R.id._nav_view;
      LinearLayout NavView = ViewBindings.findChildViewById(rootView, id);
      if (NavView == null) {
        break missingId;
      }

      id = R.id._toolbar;
      Toolbar Toolbar = ViewBindings.findChildViewById(rootView, id);
      if (Toolbar == null) {
        break missingId;
      }

      id = R.id.background;
      FrameLayout background = ViewBindings.findChildViewById(rootView, id);
      if (background == null) {
        break missingId;
      }

      id = R.id.card_online;
      CardView cardOnline = ViewBindings.findChildViewById(rootView, id);
      if (cardOnline == null) {
        break missingId;
      }

      id = R.id.card_profile;
      CardView cardProfile = ViewBindings.findChildViewById(rootView, id);
      if (cardProfile == null) {
        break missingId;
      }

      id = R.id.card_type;
      CardView cardType = ViewBindings.findChildViewById(rootView, id);
      if (cardType == null) {
        break missingId;
      }

      id = R.id.chat;
      RecyclerView chat = ViewBindings.findChildViewById(rootView, id);
      if (chat == null) {
        break missingId;
      }

      id = R.id.content_profile;
      LinearLayout contentProfile = ViewBindings.findChildViewById(rootView, id);
      if (contentProfile == null) {
        break missingId;
      }

      id = R.id.content_type;
      LinearLayout contentType = ViewBindings.findChildViewById(rootView, id);
      if (contentType == null) {
        break missingId;
      }

      id = R.id.drawable_save;
      ImageView drawableSave = ViewBindings.findChildViewById(rootView, id);
      if (drawableSave == null) {
        break missingId;
      }

      id = R.id.drawable_send;
      ImageView drawableSend = ViewBindings.findChildViewById(rootView, id);
      if (drawableSend == null) {
        break missingId;
      }

      id = R.id.edittext_msg;
      EditText edittextMsg = ViewBindings.findChildViewById(rootView, id);
      if (edittextMsg == null) {
        break missingId;
      }

      id = R.id.image_background;
      ImageView imageBackground = ViewBindings.findChildViewById(rootView, id);
      if (imageBackground == null) {
        break missingId;
      }

      id = R.id.linear_text;
      LinearLayout linearText = ViewBindings.findChildViewById(rootView, id);
      if (linearText == null) {
        break missingId;
      }

      id = R.id.lottie1;
      LottieAnimationView lottie1 = ViewBindings.findChildViewById(rootView, id);
      if (lottie1 == null) {
        break missingId;
      }

      id = R.id.relative;
      LinearLayout relative = ViewBindings.findChildViewById(rootView, id);
      if (relative == null) {
        break missingId;
      }

      id = R.id.tipying;
      LinearLayout tipying = ViewBindings.findChildViewById(rootView, id);
      if (tipying == null) {
        break missingId;
      }

      id = R.id.type_base;
      LinearLayout typeBase = ViewBindings.findChildViewById(rootView, id);
      if (typeBase == null) {
        break missingId;
      }

      id = R.id.type_text;
      TextView typeText = ViewBindings.findChildViewById(rootView, id);
      if (typeText == null) {
        break missingId;
      }

      id = R.id.vex_name;
      TextView vexName = ViewBindings.findChildViewById(rootView, id);
      if (vexName == null) {
        break missingId;
      }

      id = R.id.vex_profile;
      ImageView vexProfile = ViewBindings.findChildViewById(rootView, id);
      if (vexProfile == null) {
        break missingId;
      }

      return new HomeBinding((DrawerLayout) rootView, AppBar, Coordinator, Drawer, NavView, Toolbar,
          background, cardOnline, cardProfile, cardType, chat, contentProfile, contentType,
          drawableSave, drawableSend, edittextMsg, imageBackground, linearText, lottie1, relative,
          tipying, typeBase, typeText, vexName, vexProfile);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

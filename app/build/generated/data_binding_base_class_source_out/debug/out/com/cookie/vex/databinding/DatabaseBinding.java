// Generated by view binder compiler. Do not edit!
package com.cookie.vex.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.cookie.vex.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DatabaseBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout base;

  @NonNull
  public final LinearLayout content;

  @NonNull
  public final ImageView delete;

  @NonNull
  public final LinearLayout linearUser;

  @NonNull
  public final LinearLayout linearVex;

  @NonNull
  public final TextView text1;

  @NonNull
  public final TextView text2;

  @NonNull
  public final TextView textUser;

  @NonNull
  public final TextView textVex;

  private DatabaseBinding(@NonNull LinearLayout rootView, @NonNull LinearLayout base,
      @NonNull LinearLayout content, @NonNull ImageView delete, @NonNull LinearLayout linearUser,
      @NonNull LinearLayout linearVex, @NonNull TextView text1, @NonNull TextView text2,
      @NonNull TextView textUser, @NonNull TextView textVex) {
    this.rootView = rootView;
    this.base = base;
    this.content = content;
    this.delete = delete;
    this.linearUser = linearUser;
    this.linearVex = linearVex;
    this.text1 = text1;
    this.text2 = text2;
    this.textUser = textUser;
    this.textVex = textVex;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DatabaseBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DatabaseBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.database, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DatabaseBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      LinearLayout base = (LinearLayout) rootView;

      id = R.id.content;
      LinearLayout content = ViewBindings.findChildViewById(rootView, id);
      if (content == null) {
        break missingId;
      }

      id = R.id.delete;
      ImageView delete = ViewBindings.findChildViewById(rootView, id);
      if (delete == null) {
        break missingId;
      }

      id = R.id.linear_user;
      LinearLayout linearUser = ViewBindings.findChildViewById(rootView, id);
      if (linearUser == null) {
        break missingId;
      }

      id = R.id.linear_vex;
      LinearLayout linearVex = ViewBindings.findChildViewById(rootView, id);
      if (linearVex == null) {
        break missingId;
      }

      id = R.id.text1;
      TextView text1 = ViewBindings.findChildViewById(rootView, id);
      if (text1 == null) {
        break missingId;
      }

      id = R.id.text2;
      TextView text2 = ViewBindings.findChildViewById(rootView, id);
      if (text2 == null) {
        break missingId;
      }

      id = R.id.text_user;
      TextView textUser = ViewBindings.findChildViewById(rootView, id);
      if (textUser == null) {
        break missingId;
      }

      id = R.id.text_vex;
      TextView textVex = ViewBindings.findChildViewById(rootView, id);
      if (textVex == null) {
        break missingId;
      }

      return new DatabaseBinding((LinearLayout) rootView, base, content, delete, linearUser,
          linearVex, text1, text2, textUser, textVex);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
